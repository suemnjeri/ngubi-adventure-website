---
import Hr from "./Hr.astro";
import IconX from "@/assets/icons/IconX.svg";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import IconMenuDeep from "@/assets/icons/IconMenuDeep.svg";
import LinkButton from "./LinkButton.astro";
import { SITE } from "@/config";

const { pathname } = Astro.url;

// Remove trailing slash from current pathname if exists
const currentPath =
  pathname.endsWith("/") && pathname !== "/" ? pathname.slice(0, -1) : pathname;

const isActive = (path: string) => {
  const currentPathArray = currentPath.split("/").filter(p => p.trim());
  const pathArray = path.split("/").filter(p => p.trim());

  return currentPath === path || currentPathArray[0] === pathArray[0];
};
---


<header class="bg-dark-header-footer-bg fixed top-0 z-50 w-full text-light-text-on-dark-bg">
  <a
    id="skip-to-content"
    href="#main-content"
    class="absolute start-16 -top-full z-50 bg-accent px-3 py-2 text-background backdrop-blur-lg transition-all focus:top-4"
  >
    Skip to content
  </a>
  <div
    id="nav-container"
    class="mx-auto flex max-w-app flex-col items-center justify-between sm:flex-row"
  >
    <div
      id="top-nav-wrap"
      
      class="relative flex w-full items-baseline p-1 sm:items-center sm:py-1"
    >
      <a
        href="/"
        class="absolute start-4 py-1 text-xl leading-8 font-semibold sm:static sm:my-auto sm:text-2xl sm:leading-none max-w-[200px] overflow-hidden text-ellipsis text-light-text-on-dark-bg"
      >
        <img
          src="/images/ngubi-logo.png"
          alt={SITE.title}
          width="150"
          height="auto"
          class="h-auto max-h-14 sm:max-h-16 w-auto object-contain" {/*sm:max-h-14*/}
        />
      </a>


      <nav
        id="nav-menu"
        class="flex w-full flex-col items-center sm:ms-2 sm:flex-row sm:justify-end sm:space-x-4 sm:py-0"
      >
        <button
          id="menu-btn"
          class="focus-outline self-end p-2 sm:hidden"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <IconX id="close-icon" class="hidden" />
          <IconMenuDeep id="menu-icon" />
        </button>

        <ul
          id="menu-items"
          class:list={[
            "mt-4 grid w-44 grid-cols-2 place-content-center gap-2",
            "[&>li>a]:block [&>li>a]:px-4 [&>li>a]:py-3 [&>li>a]:text-center [&>li>a]:font-medium [&>li>a]:hover:text-accent sm:[&>li>a]:px-1.5 sm:[&>li>a]:py-1",
            "hidden",
            "sm:mt-0 sm:flex sm:w-auto sm:gap-x-4 sm:gap-y-0", // Changed sm:gap-x-5 to sm:gap-x-2
          ]}
        >
          <li>
            <a href="/" class:list={{ "active-nav": isActive("/") }}>
              Home
            </a>
          </li>
          <li>
            <a href="/services" class:list={{ "active-nav": isActive("/services") }}>
              Services
            </a>
          </li>
          <li>
            <a href="/events" class:list={{ "active-nav": isActive("/events") }}>
              Upcoming Events
            </a>
          </li>
          <li>
            <a href="/gallery" class:list={{ "active-nav": isActive("/gallery") }}>
              Gallery
            </a>
          </li>
          
          <li>
            <a href="/contact" class:list={{ "active-nav": isActive("/contact") }}>
              Contact
            </a>
          </li>

          {/* --- INSERT THEME TOGGLE BUTTON HERE --- */}
          {
            SITE.lightAndDarkMode && (
              <li class="col-span-1 flex items-center justify-center">
                <button
                  id="theme-btn"
                  class="focus-outline relative size-12 p-4 sm:size-8 hover:[&>svg]:stroke-accent text-light-text-on-dark-bg"
                  title="Toggles light & dark"
                  aria-label="auto"
                  aria-live="polite"
                >
                  <IconMoon class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
                  <IconSunHigh class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 scale-0 rotate-90 transition-all dark:scale-100 dark:-rotate-0" />
                </button>
              </li>
            )
          }
          {/* --- END INSERT --- */}

          
          
        </ul>

        

        
          {/* This will be your "Book Now" button */}
          <LinkButton
            href="/booking" // We'll create this page later
            class="ml-auto sm:ml-1 px-2 py-2 bg-accent text-white rounded-full font-semibold whitespace-nowrap hover:bg-blue-700 hover:text-white transition-colors duration-200"
            ariaLabel="Book Now"
            title="Book Now"
          >
            Book Now
          </LinkButton>

      </nav>



    </div>
  </div>
  <Hr /> {/* Ensure this Hr is visible for separating Header from content below */}
</header>

<script>
  function toggleNav() {
    const menuBtn = document.querySelector("#menu-btn");
    const menuItems = document.querySelector("#menu-items"); // This still targets the UL
    const menuIcon = document.querySelector("#menu-icon");
    const closeIcon = document.querySelector("#close-icon");

    if (!menuBtn || !menuItems || !menuIcon || !closeIcon) return;

    menuBtn.addEventListener("click", () => {
      const openMenu = menuBtn.getAttribute("aria-expanded") === "true";

      menuBtn.setAttribute("aria-expanded", openMenu ? "false" : "true");
      menuBtn.setAttribute("aria-label", openMenu ? "Open Menu" : "Close Menu");

      menuItems.classList.toggle("hidden");
      menuIcon.classList.toggle("hidden");
      closeIcon.classList.toggle("hidden");
    });
  }

  toggleNav();

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", toggleNav);

  // --- Theme toggle logic (MOVED FROM BackToTopButton.astro) ---
  const themeBtn = document.getElementById("theme-btn");
  if (themeBtn) {
    themeBtn.addEventListener("click", () => {
      const isDark = document.documentElement.classList.toggle("dark");
      // Update localStorage to persist theme choice
      localStorage.setItem("theme", isDark ? "dark" : "light");
      // Update aria-label for accessibility
      themeBtn.setAttribute("aria-label", isDark ? "dark" : "light");
    });
  }
  // --- END Theme toggle logic ---
</script>